// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//for Auth to Prisma

model Session {
  id           String   @id @default(cuid())
  user         RegisteredUsers  @relation(fields: [user_id], references: [user_id])
  user_id      String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

//Working Data Models

model Destinations {
  city                   String  @unique
  country                String
  region                  Regions
  destination_highlights String[]
  destination_image      Json[]
  Trips                  Trips[]
}

enum Regions {
  ASIA
  EUROPE
  AMERICAS
  OCEANIA
}

model Trips {
  trip_id           String       @id @default(uuid())
  trip_type         TripType? @relation(fields:[activity], references:[activity], onDelete:SetNull, onUpdate: Cascade )
  activity          Activity?
  trip_start_date         String
  trip_end_date         String
  trip_availability Int
  trip_itinerary    String[]
  trip_inclusions   String[]
  trip_price        Float
  trip_title        String
  destination       Destinations? @relation(fields: [city], references: [city], onDelete:SetNull, onUpdate: Cascade )
  city         String?
  accommodation     Accommodation? 
  bookings          Bookings[] //for user booking using trip id
}

model TripType{
  activity Activity @unique @id
  Trips Trips[]
}

enum Activity {
  SKYDIVE
  SNOWSLOPES
  SCUBADIVING
}

model Accommodation {
  trip_accommo     String    
  accommo_highlights  String[]       
  accommo_pics  Json[]
  trip Trips? @relation(fields:[trip_id], references: [trip_id])
  trip_id String @unique
}

model Bookings {
  booking_reference String @unique @id
  trip Trips @relation(fields:[trip_id], references: [trip_id], onDelete: Cascade, onUpdate: Cascade)
  trip_id String
  user RegisteredUsers? @relation(fields:[user_id], references: [user_id])
  user_id String?
  lastName String
  firstName String
  dob String
  passport_no String
  email String
  address String
  address_country String
  address_postal Int
  home_no Int
  mobile_no Int
}

model RegisteredUsers{
  user_id String @id @default(cuid())
  user_lastName String
  user_firstName String 
  user_email String @unique
  user_hash String
  user_dob String
  user_address String
  user_country String
  user_postal_code String
  user_passport_no String @unique
  user_image String?
  user_bookings Bookings[]
  user_contacts UserContacts[]
  sessions Session[]
  //nextauth
  user_emailVerified DateTime?
  providerType       String?
  providerId         String?
  providerAccountId  String?
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt          DateTime  @updatedAt 

  @@unique([providerId, providerAccountId])
}

model UserContacts {
  user RegisteredUsers @relation(fields:[user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  contact_value String @unique
  contact_type Contacts
}

enum Contacts {
  MOBILE
  HOME
  OFFICE_NO
}
